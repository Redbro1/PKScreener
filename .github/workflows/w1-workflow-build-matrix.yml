# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 1. pkscreener Build - New Release

on:
  # push:
  #   #branches: [ pre-main ]
  #   tags:
  #     - '*'
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
      sendNotification:
        description: 'Should we send notification to public telegram channel about this release?'
        required: false
        type: string
        default: 'no'
      buildDocker:
        description: 'Build docker image?'
        required: false
        type: string
        default: 'Y'
      buildBase:
        description: 'Build Docker base image before building the main app image'
        required: false
        type: string
        default: 'N'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.11'
      lastReleasedVersion:
        description: 'Last Released Version'
        required: false
        type: string
        default: ''
  # schedule:
  #   - cron: '35 11 * * 5'

jobs:

  check_should_run:
    runs-on: windows-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a week
        if: ${{ github.event_name == 'schedule' }} || ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: test -z $(git rev-list  --after="7 days"  ${{ github.sha }} --max-count=1) && echo "::set-output name=should_run::false"

  # Job for builing packages
  Build:
    name: Build Packages
    needs: check_should_run
    #needs: Create-Release
    runs-on: ${{ matrix.os }}
    permissions: write-all
      # actions: write
    outputs:
        version: ${{ steps.vars.outputs.THIS_VERSION }}
        oldVersion: ${{ steps.vars.outputs.CURRENT_VERSION }}
        devVersion: ${{ steps.vars.outputs.DEV_VERSION }}
        tag: refs/tags/${{ steps.vars.outputs.THIS_VERSION }}
        sendNotification: ${{ inputs.sendNotification }}
        buildDocker: ${{ inputs.buildDocker }}
        buildBase : ${{ inputs.buildBase }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: Windows
            CMD_BUILD: |
              pyinstaller --onefile --icon=screenshots\icon.ico pkscreener\pkscreenercli.py  --hidden-import cmath --hidden-import talib.stream --hidden-import numpy --hidden-import pandas --hidden-import alive_progress --hidden-import yfinance --hidden-import vectorbt --hidden-import PKDevTools --hidden-import PKNSETools
            DEP_BUILD: |
              python3 -m pip install --upgrade pip
              echo Installing TA-lib...
              cd .github/dependencies/
              if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
                pip3 install TA_Lib-0.4.29-cp311-cp311-win_amd64.whl
              elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
                pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
              elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
                pip3 install TA_Lib-0.4.29-cp311-cp311-win_amd64.whl
              elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
                pip3 install TA_Lib-0.4.29-cp312-cp312-win_amd64.whl
              fi
              cd ..
              cd ..
              python3 -m pip install --upgrade pip
              pip3 uninstall -y PKNSETools
              pip3 uninstall -y PKDevTools
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install .
            TEST_BUILD: |
              ./dist/pkscreenercli.exe --testbuild
              exit $?
            OUT_PATH: .\dist\pkscreenercli.exe
            FILE_NAME: pkscreenercli.exe
          
          - os: ubuntu-20.04
            TARGET: Linux
            CMD_BUILD: |
              pyinstaller --onefile --icon=screenshots/icon.ico pkscreener/pkscreenercli.py  --hidden-import cmath --hidden-import talib.stream --hidden-import numpy --hidden-import pandas --hidden-import alive_progress
              mv /home/runner/work/PKScreener/PKScreener/dist/pkscreenercli /home/runner/work/PKScreener/PKScreener/dist/pkscreenercli.bin
              chmod +x /home/runner/work/PKScreener/PKScreener/dist/pkscreenercli.bin
            DEP_BUILD: |
              cd .github/dependencies/
              pwd
              tar -xzf ta-lib-0.4.0-src.tar.gz
              cd ta-lib/
              ./configure --prefix=/usr
              make
              sudo make install
              cd /home/runner/work/PKScreener/PKScreener/
              python3 -m pip install --upgrade pip
              pip3 uninstall -y PKNSETools
              pip3 uninstall -y PKDevTools
              cd ../..
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install ta-lib==0.4.32
              pip3 install .
            TEST_BUILD: |
              /home/runner/work/PKScreener/PKScreener/dist/pkscreenercli.bin --testbuild
              exit $?
            OUT_PATH: /home/runner/work/PKScreener/PKScreener/dist/pkscreenercli.bin
            FILE_NAME: pkscreenercli.bin

          - os: macos-latest
            TARGET: MacOS
            CMD_BUILD: |
              pyinstaller --onefile --windowed --icon=screenshots/icon.ico pkscreener/pkscreenercli.py  --hidden-import cmath --hidden-import talib.stream --hidden-import numpy --hidden-import pandas --hidden-import alive_progress
              mv /Users/runner/work/PKScreener/PKScreener/dist/pkscreenercli /Users/runner/work/PKScreener/PKScreener/dist/pkscreenercli.run
            DEP_BUILD: |
              brew install ta-lib
              python3 -m pip install --upgrade pip
              pip3 uninstall -y PKNSETools
              pip3 uninstall -y PKDevTools
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              python3 -m pip install -U ta-lib==0.4.32
              pip3 install .
            TEST_BUILD: |
              /Users/runner/work/PKScreener/PKScreener/dist/pkscreenercli.run --testbuild
              exit $?
            OUT_PATH: /Users/runner/work/PKScreener/PKScreener/dist/pkscreenercli.run
            FILE_NAME: pkscreenercli.run
          
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}

      - name: Activate virtualenv for MacOS
        if: startsWith(runner.os, 'MacOS')
        run: |
          python3 -m venv venv
          source venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Environment setup to get latest released version
        shell: bash
        id: releaseversiongetter
        run: |
          pip3 install requests
          python3 .github/workflows/githubutilities.py -d
          
      - name: Declare env variables
        id: vars
        shell: bash
        run: |
          CURRENT_VERSION=${{ steps.releaseversiongetter.outputs.LAST_RELEASE_VERSION }}
          GITHUB_REF=${GITHUB_REF#refs/tags/}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          DEV_VERSION=`grep -o "'.*'" pkscreener/classes/__init__.py | sed "s/'//g"`
          VERSION_ARR=(${DEV_VERSION//./ })
          MAJOR_MINOR=${VERSION_ARR[0]}.${VERSION_ARR[1]}
          TODAY=`date +%Y%m%d`
          THIS_VERSION=${MAJOR_MINOR}.${TODAY}.${{github.run_number}}
          rm -rf pkscreener/classes/__init__.py
          echo VERSION=\'`echo ${THIS_VERSION}`\' >> pkscreener/classes/__init__.py
          echo "##[set-output name=THIS_VERSION;]$(echo ${THIS_VERSION})"
          echo "##[set-output name=CURRENT_VERSION;]$(echo ${CURRENT_VERSION})"
          echo "##[set-output name=DEV_VERSION;]$(echo ${DEV_VERSION})"

      - name: Create Tag
        if: startsWith(runner.os, 'Linux')
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            pip3 install mistletoe
            echo ${{ steps.vars.outputs.CURRENT_VERSION }}
            echo ${{ steps.vars.outputs.THIS_VERSION }}
            python3 .github/workflows/updateVersion.py -p pkscreener/release.md -f ${{ steps.vars.outputs.CURRENT_VERSION }} -r ${{ steps.vars.outputs.THIS_VERSION }} -t link
            python3 .github/workflows/updateVersion.py -p pkscreener/release.md -f [v${{ steps.vars.outputs.CURRENT_VERSION }}] -r [v${{ steps.vars.outputs.THIS_VERSION }}] -t text
            python3 .github/workflows/updateVersion.py -p README.md -f ${{ steps.vars.outputs.CURRENT_VERSION }} -r ${{ steps.vars.outputs.THIS_VERSION }} -t link
            git add pkscreener/classes/__init__.py --force
            git add pkscreener/release.md --force
            git add README.md --force
            git commit -m "GitHub Action Workflow - Updating version to latest"
            git tag ${{ steps.vars.outputs.THIS_VERSION }} -a -f -m 'Release v${{ steps.vars.outputs.THIS_VERSION }}'
            git push -v --tags

      - name: Get the GitHub Tag version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.targetPythonVersion }}

      - name: Load Cache for Linux Dependencies
        uses: actions/cache@v4
        if: startsWith(runner.os, 'Linux')
        with:
          path: |
            /usr/include/ta-lib
            /usr/bin/ta-lib-config
          key: ${{ runner.os }}-talib
          restore-keys: |
            ${{ runner.os }}-talib

      - name: Update ReadME release.md and library version
        if: startsWith(runner.os, 'Linux')
        id: read_release
        shell: bash
        run: |
          pip3 install mistletoe
          python3 .github/workflows/updateVersion.py -p pkscreener/release.md -f /${{ steps.vars.outputs.CURRENT_VERSION }}/ -r /${{ steps.vars.outputs.THIS_VERSION }}/ -t link
          r=$(cat pkscreener/release.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Install dependencies for ${{ matrix.TARGET }}
        shell: bash
        run: ${{ matrix.DEP_BUILD }}

      - name: Build for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}
        env:
          TF_ENABLE_ONEDNN_OPTS : 0

      - name: Test Built Binary for ${{ matrix.TARGET }}
        shell: bash
        timeout-minutes: 2
        continue-on-error: true
        run: ${{ matrix.TEST_BUILD }}

      - name: Save Binaries as Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.FILE_NAME }}
          path: ${{ matrix.OUT_PATH }}

      - name: Upload Binaries to Release
        if: startsWith(github.ref, 'refs/tags') || ${{ needs.check_should_run.outputs.should_run != 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.OUT_PATH }}
          asset_name: ${{ matrix.FILE_NAME }}
          tag: ${{ steps.vars.outputs.THIS_VERSION }}
          release_name: pkscreener - v${{ steps.vars.outputs.THIS_VERSION }}
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}
          overwrite: true
          prerelease: false
          make_latest: true

  README_Update:
    runs-on: ubuntu-20.04
    permissions: write-all
      # actions: write
    needs: [Build]
    name: Updates latest README file
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Find and update version
        if: startsWith(runner.os, 'Linux')
        shell: bash
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            pip3 install mistletoe
            echo ${{ needs.Build.outputs.version }}
            echo ${{ needs.Build.outputs.oldVersion }}
            v1=${{ needs.Build.outputs.oldVersion }}
            v2=${{ needs.Build.outputs.version }}
            python3 .github/workflows/updateVersion.py -p pkscreener/release.md -f ${{ needs.Build.outputs.oldVersion }} -r ${{ needs.Build.outputs.version }} -t link
            python3 .github/workflows/updateVersion.py -p pkscreener/release.md -f [v${{ needs.Build.outputs.oldVersion }}] -r [v${{ needs.Build.outputs.version }}] -t text
            python3 .github/workflows/updateVersion.py -p pkscreener/classes/__init__.py -f ${{ needs.Build.outputs.devVersion }} -r ${{ needs.Build.outputs.version }} -t text
            sed -i "s/$v1/$v2/g" README.md
            git add pkscreener/classes/__init__.py --force
            git add pkscreener/release.md --force
            git add README.md --force
            git commit -m "GitHub Action Workflow - Updating version to latest"
            git push -v

  Call-python-publish-workflow:
    uses: pkjmesra/PKScreener/.github/workflows/w2-workflow-python-publish.yml@main
    needs: [Build, README_Update]
    with:
      branch-name: ${{ needs.Build.outputs.tag }}
      version: ${{ needs.Build.outputs.version }}
      sendNotification: ${{ needs.Build.outputs.sendNotification }}
    secrets: inherit
        
  Call-Docker-workflow:
    uses: pkjmesra/PKScreener/.github/workflows/w15-docker-image.yml@main
    needs: [Build, README_Update]
    if: ${{ needs.Build.outputs.buildDocker == 'Y' || needs.Build.outputs.buildBase == 'Y'}}
    with:
      branch-name: ${{ needs.Build.outputs.tag }}
      buildBase: ${{ needs.Build.outputs.buildBase }}
      version: ${{ needs.Build.outputs.version }}
    secrets: inherit
